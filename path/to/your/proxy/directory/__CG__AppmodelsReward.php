<?php

namespace DoctrineProxies\__CG__\App\models;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Reward extends \App\models\Reward implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\models\\Reward' . "\0" . 'rewardId', '' . "\0" . 'App\\models\\Reward' . "\0" . 'rewardTitle', '' . "\0" . 'App\\models\\Reward' . "\0" . 'category', '' . "\0" . 'App\\models\\Reward' . "\0" . 'details', '' . "\0" . 'App\\models\\Reward' . "\0" . 'description', '' . "\0" . 'App\\models\\Reward' . "\0" . 'qty', '' . "\0" . 'App\\models\\Reward' . "\0" . 'neededCoins', '' . "\0" . 'App\\models\\Reward' . "\0" . 'rewardImg'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\models\\Reward' . "\0" . 'rewardId', '' . "\0" . 'App\\models\\Reward' . "\0" . 'rewardTitle', '' . "\0" . 'App\\models\\Reward' . "\0" . 'category', '' . "\0" . 'App\\models\\Reward' . "\0" . 'details', '' . "\0" . 'App\\models\\Reward' . "\0" . 'description', '' . "\0" . 'App\\models\\Reward' . "\0" . 'qty', '' . "\0" . 'App\\models\\Reward' . "\0" . 'neededCoins', '' . "\0" . 'App\\models\\Reward' . "\0" . 'rewardImg'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Reward $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(?\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(?\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getRewardId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getRewardId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRewardId', []);

        return parent::getRewardId();
    }

    /**
     * {@inheritDoc}
     */
    public function getRewardTitle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRewardTitle', []);

        return parent::getRewardTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setRewardTitle(string $rewardTitle): \App\models\Reward
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRewardTitle', [$rewardTitle]);

        return parent::setRewardTitle($rewardTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(string $category): \App\models\Reward
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getDetails(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDetails', []);

        return parent::getDetails();
    }

    /**
     * {@inheritDoc}
     */
    public function setDetails(?string $details): \App\models\Reward
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDetails', [$details]);

        return parent::setDetails($details);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(?string $description): \App\models\Reward
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getQty(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQty', []);

        return parent::getQty();
    }

    /**
     * {@inheritDoc}
     */
    public function setQty(int $qty): \App\models\Reward
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQty', [$qty]);

        return parent::setQty($qty);
    }

    /**
     * {@inheritDoc}
     */
    public function getNeededCoins(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNeededCoins', []);

        return parent::getNeededCoins();
    }

    /**
     * {@inheritDoc}
     */
    public function setNeededCoins(int $neededCoins): \App\models\Reward
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNeededCoins', [$neededCoins]);

        return parent::setNeededCoins($neededCoins);
    }

    /**
     * {@inheritDoc}
     */
    public function getRewardImg(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRewardImg', []);

        return parent::getRewardImg();
    }

    /**
     * {@inheritDoc}
     */
    public function setRewardImg(?string $rewardImg): \App\models\Reward
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRewardImg', [$rewardImg]);

        return parent::setRewardImg($rewardImg);
    }

}
